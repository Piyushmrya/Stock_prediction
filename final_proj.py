# -*- coding: utf-8 -*-
"""Final_proj.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zdnMDcwfkp5wbOGK4vizH3EWfogjIh1O

#Analysis
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# Taking Microsoft stock dataset
data = pd.read_csv('MSFT.csv')
data.head(5)

# Choosing to model and predict Closing price of stock
df = data[['Date', 'Close']]
df.head(3)

# Without string to datetime conversion
plt.plot(df['Date'], df['Close'])
plt.title("MSFT", loc = 'left')
plt.xlabel("Date")
plt.ylabel("Close Price")

import datetime
# To split str into date , month , year 
def str_to_datetime(s):
  split = s.split('-')
  year, month, day = int(split[0]), int(split[1]), int(split[2])
  return datetime.date(year=year, month=month, day=day)

df['Date'] = df['Date'].apply(str_to_datetime)

# With Date to string conversion 
import matplotlib.pyplot as plt

plt.plot(df['Date'], df['Close'])
plt.title("MSFT", loc = 'left')
plt.xlabel("Date")
plt.ylabel("Close Price")

plt.plot(df['Date'],data['Volume'])
plt.ylabel('Volume')
plt.xlabel('Date')
plt.tight_layout()

ma_day = [10, 20, 50]

for ma in ma_day:
      column_name = f"MA for {ma} days"
      data[column_name] = data['Adj Close'].rolling(ma).mean()

data1 = data[['Adj Close', 'MA for 10 days', 'MA for 20 days', 'MA for 50 days']]
plt.plot(df['Date'],data1)
plt.ylabel('Volume')
plt.xlabel('Date')
plt.tight_layout()

data['Daily Return'] = data['Adj Close'].pct_change()

data2 = data['Daily Return']
plt.plot(df['Date'],data2,'o',linestyle='--')
plt.ylabel('Daily Return')
plt.xlabel('Date')
plt.tight_layout()

for i, company in enumerate(data, 1):
    plt.plot()
    data['Daily Return'].hist(bins=50)
    plt.xlabel('Daily Return')
    plt.ylabel('Counts')
    plt.title(f'Microsoft')

"""#Prediction"""

df.index = df.pop('Date')
df.tail(3)

import numpy as np
# Split dataframe to date 
def df_split(dataframe, first_date_str, last_date_str):
  first_date = str_to_datetime(first_date_str)
  last_date  = str_to_datetime(last_date_str)
  target_date = first_date
  
  dates = []
  X, Y = [], []

  last_time = False
  while True:
    df_subset = dataframe.loc[:target_date].tail(4)
    values = df_subset['Close'].to_numpy()                  # Convert 
    x, y = values[:-1], values[-1]
    print(values)
    dates.append(target_date)
    X.append(x)
    Y.append(y)

    next_week = dataframe.loc[target_date:target_date+datetime.timedelta(days=7)]
    next_date_str = str(next_week.head(2).tail(1).index.values[0])
    year, month, day = next_date_str.split('-')
    next_date = datetime.date(day=int(day), month=int(month), year=int(year))
    
    if target_date == last_date:
      break
    target_date = next_date
    
  ret_df = pd.DataFrame({})
  ret_df['Target Date'] = dates
  
  X = np.array(X)
  for i in range(0, 3):
    X[:, i]
    ret_df[f'Target-{3-i}'] = X[:, i]
  
  ret_df['Target'] = Y

  return ret_df

def Get_date_x_y(splitted_df):
  df_as_np = splitted_df.to_numpy()

  dates = df_as_np[:, 0]

  middle_matrix = df_as_np[:, 1:-1]
  X = middle_matrix.reshape((len(dates), middle_matrix.shape[1], 1))

  Y = df_as_np[:, -1]

  return dates, X.astype(np.float32), Y.astype(np.float32)

splitted_df = df_split(df,'2022-05-03', '2023-04-28')
splitted_df

dates, X, y =  Get_date_x_y(splitted_df)
dates.shape, X.shape, y.shape

# Train , Validate and Split of Date , X (Middle matrix ) and Y (target)
date_split_80 = int(0.8*len(dates))
X_split_80 = int(0.8*len(X))
Y_split_80 = int(0.8*len(y))

date_split_90 = int(0.9*len(dates))
X_split_90 = int(0.9*len(X))
Y_split_90 = int(0.9*len(y))

dates_train, X_train, y_train = dates[:date_split_80], X[:X_split_80], y[:Y_split_80]
dates_val, X_val, y_val = dates[date_split_80:date_split_90], X[X_split_80:X_split_90], y[Y_split_80:Y_split_90]
dates_test, X_test, y_test = dates[date_split_90:], X[X_split_90:], y[Y_split_90:]

# plt.plot(dates_train, y_train)
# plt.plot(dates_val, y_val)
# plt.plot(dates_test, y_test)

# plt.legend(['Train', 'Validation', 'Test'])
# plt.show()

import tensorflow
from tensorflow import keras
from keras import layers
from keras.layers import Dense
from keras.models import Sequential
from keras.optimizers import Adam

model = Sequential([layers.Input((3, 1)),
                    layers.LSTM(64),
                    layers.Dense(32, activation='relu'),
                    layers.Dense(32, activation='relu'),
                    layers.Dense(32, activation='relu'),
                    layers.Dense(32, activation='relu'),
                    layers.Dense(32, activation='relu'),
                    layers.Dense(32, activation='relu'),
                    layers.Dense(1)])

model.compile(loss='mse', 
              optimizer=Adam(learning_rate=0.001),
              metrics=['mean_absolute_error'])

model.fit(X_train, y_train, validation_data=(X_val, y_val), epochs=100)

train_predictions = model.predict(X_train).flatten()
plt.plot(dates_train, train_predictions)
plt.plot(dates_train, y_train)
plt.xlabel('Date')
plt.ylabel('Closing Price')
plt.legend(['Training Predictions', 'Training Observations'])
plt.show()

test_predictions = model.predict(X_test).flatten()
plt.plot(dates_test, test_predictions)
plt.plot(dates_test, y_test)
plt.xlabel('Date')
plt.ylabel('Closing Price')
plt.legend(['Testing Predictions', 'Testing Observations'])
plt.show()

